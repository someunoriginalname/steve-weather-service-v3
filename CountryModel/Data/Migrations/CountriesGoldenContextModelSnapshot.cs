// <auto-generated />
using CountryModel.models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CountryModel.Data.Migrations
{
    [DbContext(typeof(CountriesGoldenContext))]
    partial class CountriesGoldenContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CountryModel.models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("numeric(18, 4)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("numeric(18, 4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("char(30)")
                        .IsFixedLength();

                    b.Property<int>("Population")
                        .HasColumnType("int");

                    b.HasKey("CityId")
                        .HasName("PK__Table__F2D21A965FAEB50E");

                    b.HasIndex("Latitude");

                    b.HasIndex("Longitude");

                    b.HasIndex("Name");

                    b.HasIndex("Population");

                    b.HasIndex(new[] { "CountryId" }, "IX_City_CountryID");

                    b.HasIndex(new[] { "Latitude" }, "IX_City_Latitude");

                    b.HasIndex(new[] { "Longitude" }, "IX_City_Longitude");

                    b.HasIndex(new[] { "Name" }, "IX_City_Name");

                    b.HasIndex(new[] { "Population" }, "IX_City_Population");

                    b.ToTable("City", (string)null);
                });

            modelBuilder.Entity("CountryModel.models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    b.Property<string>("Iso2")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("char(900)")
                        .IsFixedLength();

                    b.Property<string>("Iso3")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("char(900)")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.HasKey("CountryId");

                    b.HasIndex("Iso2");

                    b.HasIndex("Iso3");

                    b.HasIndex("Name");

                    b.HasIndex(new[] { "Iso2" }, "IX_Country_Iso2");

                    b.HasIndex(new[] { "Iso3" }, "IX_Country_Iso3");

                    b.HasIndex(new[] { "Name" }, "IX_Country_Name");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("CountryModel.models.City", b =>
                {
                    b.HasOne("CountryModel.models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .IsRequired()
                        .HasConstraintName("FK_City_Country");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("CountryModel.models.Country", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
